// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/helloworld.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type HelloRequest struct {
	// @gotags:json:"name-1"
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HelloRequest) Reset()         { *m = HelloRequest{} }
func (m *HelloRequest) String() string { return proto.CompactTextString(m) }
func (*HelloRequest) ProtoMessage()    {}
func (*HelloRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4d53fe9c48eadaad, []int{0}
}

func (m *HelloRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HelloRequest.Unmarshal(m, b)
}
func (m *HelloRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HelloRequest.Marshal(b, m, deterministic)
}
func (m *HelloRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HelloRequest.Merge(m, src)
}
func (m *HelloRequest) XXX_Size() int {
	return xxx_messageInfo_HelloRequest.Size(m)
}
func (m *HelloRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_HelloRequest.DiscardUnknown(m)
}

var xxx_messageInfo_HelloRequest proto.InternalMessageInfo

func (m *HelloRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type HelloResponse struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Bot                  *Bot     `protobuf:"bytes,2,opt,name=bot,proto3" json:"bot,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HelloResponse) Reset()         { *m = HelloResponse{} }
func (m *HelloResponse) String() string { return proto.CompactTextString(m) }
func (*HelloResponse) ProtoMessage()    {}
func (*HelloResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4d53fe9c48eadaad, []int{1}
}

func (m *HelloResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HelloResponse.Unmarshal(m, b)
}
func (m *HelloResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HelloResponse.Marshal(b, m, deterministic)
}
func (m *HelloResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HelloResponse.Merge(m, src)
}
func (m *HelloResponse) XXX_Size() int {
	return xxx_messageInfo_HelloResponse.Size(m)
}
func (m *HelloResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_HelloResponse.DiscardUnknown(m)
}

var xxx_messageInfo_HelloResponse proto.InternalMessageInfo

func (m *HelloResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *HelloResponse) GetBot() *Bot {
	if m != nil {
		return m.Bot
	}
	return nil
}

type HelloStreamRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HelloStreamRequest) Reset()         { *m = HelloStreamRequest{} }
func (m *HelloStreamRequest) String() string { return proto.CompactTextString(m) }
func (*HelloStreamRequest) ProtoMessage()    {}
func (*HelloStreamRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4d53fe9c48eadaad, []int{2}
}

func (m *HelloStreamRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HelloStreamRequest.Unmarshal(m, b)
}
func (m *HelloStreamRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HelloStreamRequest.Marshal(b, m, deterministic)
}
func (m *HelloStreamRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HelloStreamRequest.Merge(m, src)
}
func (m *HelloStreamRequest) XXX_Size() int {
	return xxx_messageInfo_HelloStreamRequest.Size(m)
}
func (m *HelloStreamRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_HelloStreamRequest.DiscardUnknown(m)
}

var xxx_messageInfo_HelloStreamRequest proto.InternalMessageInfo

func (m *HelloStreamRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type HelloStreamResponse struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HelloStreamResponse) Reset()         { *m = HelloStreamResponse{} }
func (m *HelloStreamResponse) String() string { return proto.CompactTextString(m) }
func (*HelloStreamResponse) ProtoMessage()    {}
func (*HelloStreamResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4d53fe9c48eadaad, []int{3}
}

func (m *HelloStreamResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HelloStreamResponse.Unmarshal(m, b)
}
func (m *HelloStreamResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HelloStreamResponse.Marshal(b, m, deterministic)
}
func (m *HelloStreamResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HelloStreamResponse.Merge(m, src)
}
func (m *HelloStreamResponse) XXX_Size() int {
	return xxx_messageInfo_HelloStreamResponse.Size(m)
}
func (m *HelloStreamResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_HelloStreamResponse.DiscardUnknown(m)
}

var xxx_messageInfo_HelloStreamResponse proto.InternalMessageInfo

func (m *HelloStreamResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func init() {
	proto.RegisterType((*HelloRequest)(nil), "proto.HelloRequest")
	proto.RegisterType((*HelloResponse)(nil), "proto.HelloResponse")
	proto.RegisterType((*HelloStreamRequest)(nil), "proto.HelloStreamRequest")
	proto.RegisterType((*HelloStreamResponse)(nil), "proto.HelloStreamResponse")
}

func init() { proto.RegisterFile("proto/helloworld.proto", fileDescriptor_4d53fe9c48eadaad) }

var fileDescriptor_4d53fe9c48eadaad = []byte{
	// 243 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x8f, 0x41, 0x4b, 0xc4, 0x30,
	0x10, 0x85, 0x8d, 0xba, 0x8a, 0xa3, 0x1e, 0x76, 0x56, 0xa4, 0x16, 0x0f, 0x4b, 0x4e, 0xf1, 0xb2,
	0xca, 0xea, 0x2f, 0x50, 0x41, 0x0f, 0x1e, 0xa4, 0x1e, 0x3c, 0xb7, 0xec, 0xa0, 0x42, 0x9a, 0xa9,
	0x4d, 0x16, 0xff, 0xaf, 0xbf, 0x44, 0x3a, 0x49, 0x61, 0x0b, 0xc5, 0xcb, 0x9e, 0x92, 0xbc, 0xf7,
	0xf1, 0x5e, 0x1e, 0x9c, 0x37, 0x2d, 0x07, 0xbe, 0xfe, 0x24, 0x6b, 0xf9, 0x87, 0x5b, 0xbb, 0x5a,
	0x88, 0x80, 0x13, 0x39, 0x72, 0x8c, 0xf6, 0x8a, 0x1a, 0x72, 0xc9, 0xd2, 0x1a, 0x4e, 0x9e, 0x3b,
	0xbc, 0xa0, 0xef, 0x35, 0xf9, 0x80, 0x08, 0xfb, 0xae, 0xac, 0x29, 0x53, 0x73, 0x65, 0x8e, 0x0a,
	0xb9, 0xeb, 0x27, 0x38, 0x4d, 0x8c, 0x6f, 0xd8, 0x79, 0xc2, 0x0c, 0x0e, 0x6b, 0xf2, 0xbe, 0xfc,
	0xe8, 0xb9, 0xfe, 0x89, 0x97, 0xb0, 0x57, 0x71, 0xc8, 0x76, 0xe7, 0xca, 0x1c, 0x2f, 0x21, 0x76,
	0x2c, 0xee, 0x39, 0x14, 0x9d, 0xac, 0x0d, 0xa0, 0x04, 0xbd, 0x85, 0x96, 0xca, 0xfa, 0xbf, 0xca,
	0x2b, 0x98, 0x0d, 0xc8, 0x54, 0x3c, 0x82, 0x2e, 0x7f, 0x15, 0x80, 0xb0, 0xef, 0xdd, 0x62, 0xbc,
	0x83, 0x89, 0xec, 0xc7, 0x59, 0x6a, 0xdf, 0x9c, 0x97, 0x9f, 0x0d, 0xc5, 0x18, 0xab, 0x77, 0xf0,
	0x15, 0xa6, 0x8f, 0xbc, 0xae, 0x2c, 0xc5, 0x42, 0xb1, 0xf1, 0x62, 0x13, 0x1e, 0xfc, 0x39, 0xcf,
	0xc7, 0xac, 0x3e, 0xcd, 0xa8, 0x1b, 0x85, 0x2f, 0x30, 0x7d, 0xb0, 0x5f, 0xe4, 0xc2, 0xf6, 0x89,
	0x46, 0x55, 0x07, 0x62, 0xde, 0xfe, 0x05, 0x00, 0x00, 0xff, 0xff, 0x62, 0x6a, 0x01, 0x92, 0xe2,
	0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// HelloWorldClient is the client API for HelloWorld service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HelloWorldClient interface {
	Hello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error)
	// double stream
	DoubleStreamHello(ctx context.Context, opts ...grpc.CallOption) (HelloWorld_DoubleStreamHelloClient, error)
	// client stream
	ClientStreamHello(ctx context.Context, opts ...grpc.CallOption) (HelloWorld_ClientStreamHelloClient, error)
}

type helloWorldClient struct {
	cc *grpc.ClientConn
}

func NewHelloWorldClient(cc *grpc.ClientConn) HelloWorldClient {
	return &helloWorldClient{cc}
}

func (c *helloWorldClient) Hello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error) {
	out := new(HelloResponse)
	err := c.cc.Invoke(ctx, "/proto.HelloWorld/hello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helloWorldClient) DoubleStreamHello(ctx context.Context, opts ...grpc.CallOption) (HelloWorld_DoubleStreamHelloClient, error) {
	stream, err := c.cc.NewStream(ctx, &_HelloWorld_serviceDesc.Streams[0], "/proto.HelloWorld/DoubleStreamHello", opts...)
	if err != nil {
		return nil, err
	}
	x := &helloWorldDoubleStreamHelloClient{stream}
	return x, nil
}

type HelloWorld_DoubleStreamHelloClient interface {
	Send(*HelloStreamRequest) error
	Recv() (*HelloStreamResponse, error)
	grpc.ClientStream
}

type helloWorldDoubleStreamHelloClient struct {
	grpc.ClientStream
}

func (x *helloWorldDoubleStreamHelloClient) Send(m *HelloStreamRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *helloWorldDoubleStreamHelloClient) Recv() (*HelloStreamResponse, error) {
	m := new(HelloStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *helloWorldClient) ClientStreamHello(ctx context.Context, opts ...grpc.CallOption) (HelloWorld_ClientStreamHelloClient, error) {
	stream, err := c.cc.NewStream(ctx, &_HelloWorld_serviceDesc.Streams[1], "/proto.HelloWorld/ClientStreamHello", opts...)
	if err != nil {
		return nil, err
	}
	x := &helloWorldClientStreamHelloClient{stream}
	return x, nil
}

type HelloWorld_ClientStreamHelloClient interface {
	Send(*HelloStreamRequest) error
	CloseAndRecv() (*HelloStreamResponse, error)
	grpc.ClientStream
}

type helloWorldClientStreamHelloClient struct {
	grpc.ClientStream
}

func (x *helloWorldClientStreamHelloClient) Send(m *HelloStreamRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *helloWorldClientStreamHelloClient) CloseAndRecv() (*HelloStreamResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(HelloStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// HelloWorldServer is the server API for HelloWorld service.
type HelloWorldServer interface {
	Hello(context.Context, *HelloRequest) (*HelloResponse, error)
	// double stream
	DoubleStreamHello(HelloWorld_DoubleStreamHelloServer) error
	// client stream
	ClientStreamHello(HelloWorld_ClientStreamHelloServer) error
}

// UnimplementedHelloWorldServer can be embedded to have forward compatible implementations.
type UnimplementedHelloWorldServer struct {
}

func (*UnimplementedHelloWorldServer) Hello(ctx context.Context, req *HelloRequest) (*HelloResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Hello not implemented")
}
func (*UnimplementedHelloWorldServer) DoubleStreamHello(srv HelloWorld_DoubleStreamHelloServer) error {
	return status.Errorf(codes.Unimplemented, "method DoubleStreamHello not implemented")
}
func (*UnimplementedHelloWorldServer) ClientStreamHello(srv HelloWorld_ClientStreamHelloServer) error {
	return status.Errorf(codes.Unimplemented, "method ClientStreamHello not implemented")
}

func RegisterHelloWorldServer(s *grpc.Server, srv HelloWorldServer) {
	s.RegisterService(&_HelloWorld_serviceDesc, srv)
}

func _HelloWorld_Hello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelloWorldServer).Hello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.HelloWorld/Hello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelloWorldServer).Hello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HelloWorld_DoubleStreamHello_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HelloWorldServer).DoubleStreamHello(&helloWorldDoubleStreamHelloServer{stream})
}

type HelloWorld_DoubleStreamHelloServer interface {
	Send(*HelloStreamResponse) error
	Recv() (*HelloStreamRequest, error)
	grpc.ServerStream
}

type helloWorldDoubleStreamHelloServer struct {
	grpc.ServerStream
}

func (x *helloWorldDoubleStreamHelloServer) Send(m *HelloStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *helloWorldDoubleStreamHelloServer) Recv() (*HelloStreamRequest, error) {
	m := new(HelloStreamRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _HelloWorld_ClientStreamHello_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HelloWorldServer).ClientStreamHello(&helloWorldClientStreamHelloServer{stream})
}

type HelloWorld_ClientStreamHelloServer interface {
	SendAndClose(*HelloStreamResponse) error
	Recv() (*HelloStreamRequest, error)
	grpc.ServerStream
}

type helloWorldClientStreamHelloServer struct {
	grpc.ServerStream
}

func (x *helloWorldClientStreamHelloServer) SendAndClose(m *HelloStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *helloWorldClientStreamHelloServer) Recv() (*HelloStreamRequest, error) {
	m := new(HelloStreamRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _HelloWorld_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.HelloWorld",
	HandlerType: (*HelloWorldServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "hello",
			Handler:    _HelloWorld_Hello_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "DoubleStreamHello",
			Handler:       _HelloWorld_DoubleStreamHello_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "ClientStreamHello",
			Handler:       _HelloWorld_ClientStreamHello_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "proto/helloworld.proto",
}
